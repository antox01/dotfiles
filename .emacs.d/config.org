#+TITLE: Emacs configuration
#+DESCRIPTION: Org-mode based configuration
#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Basic configurations
** Packages settings
   #+BEGIN_SRC emacs-lisp
     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			      ("org" . "https://orgmode.org/elpa/")
			      ("melpa" . "https://melpa.org/packages/")))


     (dolist (package '(use-package))
	(unless (package-installed-p package)
	    (package-install package)))
     (require 'use-package)
     (setq use-package-always-ensure t)
   #+END_SRC

** Emacs Frame
   Disable all the bar present in emacs and adding the line number

    #+BEGIN_SRC emacs-lisp
      (defvar efs/default-font-size 100)
      (defvar efs/default-variable-font-size 100)

      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (show-paren-mode t)
      (tool-bar-mode -1)
      (tooltip-mode nil)
      (global-display-line-numbers-mode t)
      (setq display-line-numbers-type 'relative)

      ;; Disable line numbers for some modes
      (dolist (mode '(org-mode-hook
		      helm-mode-hook
		      term-mode-hook
		      eshell-mode-hook))
	(add-hook mode (lambda () (display-line-numbers-mode 0))))

      ;; Resolve Tiling wm resize issue
      (setq frame-resize-pixelwise t)

      (set-face-attribute 'default nil :font "UbuntuMono Nerd Font" :height efs/default-font-size)
    #+END_SRC

** Backup files
    #+BEGIN_SRC emacs-lisp
      (setq backup-directory-alist '(("." . "~/.local/share/emacs-saves")))
      (setq backup-by-copying t)
    #+END_SRC
    
** Theme
   #+BEGIN_SRC emacs-lisp
   (use-package base16-theme
       :init
       (load-theme 'base16-default-dark t))
 #+END_SRC

** Doom-modeline
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)
     
     (use-package doom-modeline
	 :init (doom-modeline-mode 1)
	 :custom (
		  (doom-modeline-height 15)
		  (doom-modeline-window-width-limit fill-column)
		  (doom-modeline-icon (display-graphic-p))))
   #+END_SRC

* General
  #+BEGIN_SRC emacs-lisp
    (use-package general
      :config
      (general-create-definer atx/leader-bind
	:keymaps '(normal insert visual emacs)
	:prefix "SPC"
	:global-prefix "C-SPC"))
  #+END_SRC

* Evil-mode
    #+BEGIN_SRC emacs-lisp
      (use-package evil
	:init
	(setq evil-want-integration t)
	(setq evil-want-keybinding nil)
	(setq evil-want-C-u-scroll t)
	:config
	(evil-mode 1)
	(evil-define-key 'insert 'global (kbd "C-g") 'evil-normal-state)
	)

      (use-package evil-collection
	:after evil
	:config
	(evil-collection-init))

      (use-package evil-quickscope
	:ensure t
	:config
	(global-evil-quickscope-mode 1))


      ;; (evil-set-leader 'normal (kbd "SPC"))
      ;; (evil-define-key 'normal 'global (kbd "<leader>fs") 'save-buffer)
      ;; (evil-define-key 'normal 'global (kbd "<leader>ff") 'helm-find-files)
      ;; (evil-define-key 'normal 'global (kbd "<leader>fd") 'dired)

      ;; ;; Buffers specific keybinds
      ;; (evil-define-key 'normal 'global (kbd "<leader>bk") 'kill-buffer-and-window)
      ;; (evil-define-key 'normal 'global (kbd "<leader>bl") 'switch-to-buffer)
      ;; (evil-define-key 'normal 'global (kbd "<leader>bn") 'next-buffer)
      ;; (evil-define-key 'normal 'global (kbd "<leader>bp") 'previous-buffer)

      ;; ;; Window movements
      ;; (evil-define-key 'normal 'global (kbd "<leader>wq") 'evil-quit)
      ;; (evil-define-key 'normal 'global (kbd "<leader>wc") 'evil-window-delete)
      ;; (evil-define-key 'normal 'global (kbd "<leader>wb") 'split-window-below)
      ;; (evil-define-key 'normal 'global (kbd "<leader>wv") 'split-window-horizontally)
      ;; (evil-define-key 'normal 'global (kbd "<leader>wh") 'evil-window-left)
      ;; (evil-define-key 'normal 'global (kbd "<leader>wj") 'evil-window-down)
      ;; (evil-define-key 'normal 'global (kbd "<leader>wk") 'evil-window-top)
      ;; (evil-define-key 'normal 'global (kbd "<leader>wl") 'evil-window-right)

      ;; (evil-define-key 'normal 'global (kbd "<leader>h") 'help-command)

      (atx/leader-bind
	"f" '(:ignore t :which-key "file")
	"fs" 'save-buffer
	"." '(find-file :which-key "find")
	"fd" 'dired

	"b" '(:ignore t :which-key "buffer")
	"bk" 'kill-buffer-and-window
	"bl" 'switch-to-buffer
	"bn" 'next-buffer
	"bp" 'previous-buffer

	"w" '(:ignore t :which-key "window")
	"wq" 'evil-quit
	"wc" 'evil-window-delete
	"wb" 'split-window-below
	"wv" 'split-window-horizontally
	"wh" 'evil-window-left
	"wj" 'evil-window-down
	"wk" 'evil-window-up
	"wl" 'evil-window-right

	"p" 'projectile-command-map

	"h" 'help-command)
    #+END_SRC
    
* Magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit)

      (atx/leader-bind
	"g" '(:ignore t :which-key "magit")
	"gs" 'magit-status)
    #+END_SRC

* Helm
  #+BEGIN_SRC emacs-lisp
  (use-package helm
      :ensure t)
  (require 'helm-config)
  (setq helm-split-window-in-side-p t
      helm-move-to-line-cycle-in-source t)

  (helm-mode 1)
  ;; (global-set-key (kbd "M-x") 'helm-M-x)
  ;; (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC

* Ivy
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    (use-package swiper)

    (use-package ivy-rich
      :init
      (ivy-rich-mode 1))

    (use-package counsel
      :bind (("C-M-j" . 'counsel-switch-buffer)
	     :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history))
      :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
      :config
      (counsel-mode 1))
  #+END_SRC

* Which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
	:ensure t)
    (setq which-key-show-early-on-C-h t)
    (which-key-setup-side-window-bottom)
    (which-key-mode)
  #+END_SRC

* Programming
  This section contains all the package and configurations I use for programming.
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :init
       (when (file-directory-p "~/source/projects")
	 (setq projectile-project-search-path '("~/source/projects")))
       (setq projectile-switch-project-action #'projectile-dired))
   #+END_SRC

** Lsp-mode
   #+BEGIN_SRC emacs-lisp
     (defun atx/lsp-setup ()
       (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
       (lsp-headerline-breadcrumb-mode))

     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :hook ((python-mode . lsp)
	      (c-mode . lsp)
	      (c++-mode .lsp)
	      (lsp-mode . atx/lsp-setup))
       :init
       (setq lsp-keymap-prefix "C-c l")
       :config
       (lsp-enable-which-key-integration t)
       (setq lsp-idle-delay 0.1))
   #+END_SRC
   
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       ;; :after lsp-mode
       :hook (prog-mode . company-mode)
       :bind (:map company-active-map
		   ("<tab>" . company-complete-selection))
	     (:map company-active-map
		   ("C-n" . company-select-next))
	     (:map company-active-map
		   ("C-p" . company-select-previous))
	     (:map company-active-map
		   ("C-n" . company-select-next))
	     (:map company-active-map
		   ("C-p" . company-select-previous))
	     (:map company-active-map
		   ("C-t" . company-search-toggle-filtering))
	     ;; (:map lsp-mode-map
	     ;;       ("<tab>" . company-indent-or-complete-common))

       :custom
       (company-minimum-prefix-length 1)
       (company-idle-delay 0.0))

     (use-package company-box
       :hook (company-mode . company-box-mode))
  #+END_SRC

** Autopair
   #+BEGIN_SRC emacs-lisp
     (use-package autopair
       :ensure t
       :config
       (add-hook 'prog-mode-hook 'autopair-mode))
   #+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :config
      ;; (setq yas-snippet-dirs
      ;; 	'("~/.emacs.d/snippets"))
      (yas-global-mode 1))

    (use-package yasnippet-snippets)
  #+END_SRC

* Rainbow-mode
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-mode
	:ensure t)
    (use-package rainbow-delimiters
      :ensure t
      :config
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
    (use-package rainbow-identifiers
      :ensure t
      :config
      (add-hook 'prog-mode-hook 'rainbow-identifiers-mode))
  #+END_SRC

* Org-mode
  #+BEGIN_SRC emacs-lisp
    (use-package org)

  #+END_SRC
** Auto-tangle config file
   #+BEGIN_SRC emacs-lisp
     (defun atx/tangle-config ()
       (when (string-equal (file-name-directory (buffer-file-name))
			   (expand-file-name user-emacs-directory))
	 (let ((org-confirm-babel-evaluate nil))
	   (org-babel-tangle))))

     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'atx/tangle-config)))
   #+END_SRC
   
** Org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
   #+END_SRC
