#+TITLE: Emacs configuration
#+DESCRIPTION: Org-mode based configuration
#+LANGUAGE: en
#+PROPERTY: results silent

* Basic configurations
** Emacs Frame
   Disable all the bar present in emacs and adding the line number

    #+BEGIN_SRC emacs-lisp
      (defvar efs/default-font-size 100)
      (defvar efs/default-variable-font-size 100)

      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (show-paren-mode t)
      (tool-bar-mode -1)
      (tooltip-mode nil)
      (global-display-line-numbers-mode t)
      (setq display-line-numbers-type 'relative)

      ;; Disable line numbers for some modes
      (dolist (mode '(org-mode-hook
		      helm-mode-hook
		      term-mode-hook
		      eshell-mode-hook))
	(add-hook mode (lambda () (display-line-numbers-mode 0))))

      ;; Resolve Tiling wm resize issue
      (setq frame-resize-pixelwise t)

      (set-face-attribute 'default nil :font "UbuntuMono Nerd Font" :height efs/default-font-size)
    #+END_SRC

** Backup files
    #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("." . "~/.local/share/emacs-saves")))
    (setq backup-by-copying t)
    #+END_SRC
    
** Theme
 #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
	 :config
	 (load-theme 'base16-default-dark t)
	 :ensure t)
 #+END_SRC

** Doom-modeline
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)
     
     (use-package doom-modeline
	 :init (doom-modeline-mode 1)
	 :custom (
		  (doom-modeline-height 15)
		  (doom-modeline-window-width-limit fill-column)
		  (doom-modeline-icon (display-graphic-p))))
   #+END_SRC

* Evil-mode
    #+BEGIN_SRC emacs-lisp
      (use-package evil
	  :ensure t)
      (evil-mode 1)

      ;; (use-package evil-leader
      ;;     :ensure t
      ;;     :config
      ;;     (global-evil-leader-mode)
      ;;     (evil-leader/set-leader (kbd "SPC"))
      ;;     (evil-leader/set-key "f" 'helm-find-files)
      ;; )

      (use-package evil-quickscope
	:ensure t
	:config
	(global-evil-quickscope-mode 1))

      (evil-define-key 'insert 'global (kbd "C-g") 'evil-normal-state)

      (evil-set-leader 'normal (kbd "SPC"))
      (evil-define-key 'normal 'global (kbd "<leader>fs") 'save-buffer)
      (evil-define-key 'normal 'global (kbd "<leader>ff") 'helm-find-files)
      (evil-define-key 'normal 'global (kbd "<leader>fd") 'dired)

      ;; Buffers specific keybinds
      (evil-define-key 'normal 'global (kbd "<leader>bk") 'kill-buffer-and-window)
      (evil-define-key 'normal 'global (kbd "<leader>bl") 'switch-to-buffer)
      (evil-define-key 'normal 'global (kbd "<leader>bn") 'next-buffer)
      (evil-define-key 'normal 'global (kbd "<leader>bp") 'previous-buffer)

      ;; Window movements
      (evil-define-key 'normal 'global (kbd "<leader>wq") 'evil-quit)
      (evil-define-key 'normal 'global (kbd "<leader>wc") 'evil-window-delete)
      (evil-define-key 'normal 'global (kbd "<leader>wb") 'split-window-below)
      (evil-define-key 'normal 'global (kbd "<leader>wv") 'split-window-horizontally)
      (evil-define-key 'normal 'global (kbd "<leader>wh") 'evil-window-left)
      (evil-define-key 'normal 'global (kbd "<leader>wj") 'evil-window-down)
      (evil-define-key 'normal 'global (kbd "<leader>wk") 'evil-window-top)
      (evil-define-key 'normal 'global (kbd "<leader>wl") 'evil-window-right)

      (evil-define-key 'normal 'global (kbd "<leader>h") 'help-command)
    #+END_SRC
    
* Key-chord
  Enable delayed keypressing in the editor
#+BEGIN_SRC emacs-lisp
  ;; (setq key-chord-two-keys-delay 0.5)
  ;; (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  ;; (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
  ;; (key-chord-mode 1)
#+END_SRC
* Magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
	  :ensure t)

      (use-package evil-magit
	  :ensure t
	  :config
	  (setq evil-magit-state 'normal))
    #+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
      :ensure t)
  (require 'helm-config)
  (setq helm-split-window-in-side-p t
      helm-move-to-line-cycle-in-source t)

  (helm-mode 1)
  ;; (global-set-key (kbd "M-x") 'helm-M-x)
  ;; (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package swiper)

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp
    (use-package which-key
	:ensure t)
    (setq which-key-show-early-on-C-h t)
    (which-key-setup-side-window-bottom)
    (which-key-mode)
#+END_SRC

* Programming
** Company
#+BEGIN_SRC emacs-lisp
    (use-package company
	:ensure t
	:config
	(setq company-idle-delay 0)
	(setq company-minimun-prefix-length 0)
	
	(define-key company-active-map (kbd "C-n") 'company-select-next)
	(define-key company-active-map (kbd "C-p") 'company-select-previous)
	(define-key company-search-map (kbd "C-n") 'company-select-next)
	(define-key company-search-map (kbd "C-p") 'company-select-previous)
	(define-key company-search-map (kbd "C-t") 'company-search-toggle-filtering)
    )
#+END_SRC

** Company-quickhelp
Company documentation for selected item
    #+BEGIN_SRC emacs-lisp
    (use-package company-quickhelp
    :ensure t
    )
    (company-quickhelp-mode)
    #+END_SRC

** Company-backends 
   #+BEGIN_SRC emacs-lisp
   (require 'company)
    (setq company-backends '(company-elisp))
    #+END_SRC

** Eglot
   #+BEGIN_SRC emacs-lisp
     (use-package eglot
       :ensure t
       :config
       (add-to-list 'eglot-server-programs `((c++-mode c-mode) "clangd"))
       (add-to-list 'eglot-server-programs
		    `(python-mode . ("pyls" "-v" "--tcp" "--host"
				     "localhost" "--port" :autoport)))
       (add-hook 'c++-mode-hook 'eglot-ensure)
       (add-hook 'c-mode-hook 'eglot-ensure)
       (add-hook 'python-mode-hook 'eglot-ensure))
   #+END_SRC

** Flycheck
   #+BEGIN_SRC emacs-lisp
     ;; (use-package flycheck
     ;; :ensure t
     ;; :config
     ;; (global-flycheck-mode))
   #+END_SRC

** Eldoc
   #+BEGIN_SRC emacs-lisp
     (use-package eldoc
     :ensure t
     :config
     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
     (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
     (add-hook 'ielm-mode-hook 'eldoc-mode))
   #+END_SRC
   
** Start autocompletion
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'company
	 (add-hook 'c++-mode-hook 'company-mode)
	 (add-hook 'c-mode-hook 'company-mode)
	 (add-hook 'python-mode-hook 'company-mode)
	 (add-hook 'emacs-lisp-mode-hook 'company-mode))
   #+END_SRC

** Autopair
   #+BEGIN_SRC emacs-lisp
     (use-package autopair
       :ensure t
       :config
       (add-hook 'prog-mode-hook 'autopair-mode))
   #+END_SRC

* Yasnippet 
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :config
      ;; (setq yas-snippet-dirs
      ;; 	'("~/.emacs.d/snippets"))
      (yas-global-mode 1))

    (use-package yasnippet-snippets
      :ensure t)
  #+END_SRC

* Try
#+BEGIN_SRC emacs-lisp
    (use-package try
	:ensure t)
#+END_SRC

* Rainbow-mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
      :ensure t)
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
  (use-package rainbow-identifiers
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-identifiers-mode))
#+END_SRC

* Org-mode
** Org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
   #+END_SRC

** Evil-org
  Evil-mode integration for org-mode
    #+BEGIN_SRC emacs-lisp
    (use-package evil-org
	:ensure t
	:after org
	:config
	(add-hook 'org-mode-hook 'evil-org-mode)
	(add-hook 'evil-org-mode-hook
	    (lambda ()
		(evil-org-set-key-theme)))
    )
    #+END_SRC

